package com.oyetest.reports;

import org.testng.IReporter;
import org.testng.ISuite;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;
import org.testng.reporters.XMLStringBuffer;
import com.oyetest.utils.FileUtils;

import java.util.List;
import java.util.Set;

public class CustomJUnitReporter implements IReporter {

    @Override
    public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
        XMLStringBuffer buffer = new XMLStringBuffer();

        buffer.addComment("Generated by Custom JUnit Reporter");
        buffer.push("testsuites");  // Push the root "testsuites" tag

        // Iterate through each suite
        for (ISuite suite : suites) {
            int passed = 0;
            int failed = 0;
            int skipped = 0;
            double totalTime = 0;
        
            // Calculate all values before pushing the "testsuite" tag
            for (String suiteName : suite.getResults().keySet()) {
                ITestContext context = suite.getResults().get(suiteName).getTestContext();
        
                // Calculate passed tests count
                passed += context.getPassedTests().size();
        
                // Calculate failed tests count
                failed += context.getFailedTests().size();
        
                // Calculate skipped tests count
                skipped += context.getSkippedTests().size();
        
                // Calculate total execution time for the suite
                totalTime += context.getEndDate().getTime() - context.getStartDate().getTime();
            }

            // Push the "testsuite" tag with all calculated attributes
            buffer.push("testsuite", 
                "name", suite.getName(),
                "tests", String.valueOf(passed + failed + skipped),  // Total number of tests
                "failures", String.valueOf(failed),
                "skipped", String.valueOf(skipped),
                "time", String.valueOf(totalTime / 1000) // Total time in seconds
            );

            // Iterate through each test result in the suite and push "testcase" tags
            for (String suiteName : suite.getResults().keySet()) {
                ITestContext context = suite.getResults().get(suiteName).getTestContext();

                // Push each passed test as "testcase" tags
                passed += processTestResults(context.getPassedTests().getAllResults(), buffer, "testcase", "passed");

                // Push each failed test as "testcase" tags
                failed += processTestResults(context.getFailedTests().getAllResults(), buffer, "testcase", "failed");

                // Push each skipped test as "testcase" tags
                skipped += processTestResults(context.getSkippedTests().getAllResults(), buffer, "testcase", "skipped");
            }

            // Close the "testsuite" tag for the current suite
            buffer.pop("testsuite");
        }

        // Close the "testsuites" tag at the end
        buffer.pop("testsuites");

        // Write the XML to the output directory
        FileUtils.writeFile(outputDirectory, "custom-junit-report.xml", buffer.toXML());
    }

    // Helper method to process test results based on their status (passed, failed, skipped)
    private int processTestResults(Set<ITestResult> results, XMLStringBuffer buffer, String testcaseTag, String status) {
        int count = 0;
    
        for (ITestResult result : results) {
            count++;
            String subid = (String) result.getTestContext().getAttribute("subid");
    
            // Calculate the time in seconds (divide by 1000.0 to convert milliseconds to seconds)
            long timeMillis = result.getEndMillis() - result.getStartMillis();
            double timeInSeconds = timeMillis / 1000.0;
    
            // Start the testcase element
            buffer.push(testcaseTag,
                "classname", result.getTestClass().getName(),
                "name", result.getMethod().getMethodName(),
                "subid", subid != null ? subid : "default-subid", // Use dynamic subid or default
                "time", String.valueOf(timeInSeconds)); // Convert the time to String after dividing
    
            // Add properties element with subid
            buffer.push("properties");
            buffer.push("property", "name", "subid", "value", subid != null ? subid : "default-subid");
            buffer.pop("property");
            buffer.pop("properties");
    
            // Handling different statuses
            if ("failed".equals(status)) {
                // For failed test cases, add failure details in <failure> tag
                buffer.push("failure",
                    "message", result.getThrowable().getMessage(),
                    "type", result.getThrowable().getClass().getSimpleName());
                    buffer.addString(result.getThrowable().getMessage());
                buffer.pop("failure");
            } else if ("skipped".equals(status)) {
                // For skipped test cases, add <skipped> tag
                buffer.push("skipped");
                buffer.pop("skipped");
            }
    
            // Close the testcase element
            buffer.pop(testcaseTag);
        }
    
        return count;
    }
}


